# Generated by Django 5.2 on 2025-08-29 14:40

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ServiceCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the record is soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Category name (e.g., 'Hair Services', 'Nail Care')",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Category description"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this category is available for booking",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=0, help_text="Order for displaying categories"
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent category for hierarchy support",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="services.servicecategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service Category",
                "verbose_name_plural": "Service Categories",
                "db_table": "service_categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the record is soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Service name (e.g., 'Haircut', 'Manicure')",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Detailed service description"
                    ),
                ),
                (
                    "base_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Base price in salon currency",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        help_text="Service duration in minutes (15-480 min)",
                        validators=[
                            django.core.validators.MinValueValidator(15),
                            django.core.validators.MaxValueValidator(480),
                        ],
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this service is available for booking",
                    ),
                ),
                (
                    "requires_consultation",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this service requires a consultation first",
                    ),
                ),
                (
                    "preparation_time",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Preparation time in minutes before service (0-60 min)",
                        validators=[django.core.validators.MaxValueValidator(60)],
                    ),
                ),
                (
                    "cleanup_time",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cleanup time in minutes after service (0-30 min)",
                        validators=[django.core.validators.MaxValueValidator(30)],
                    ),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order for displaying services within category",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Service category",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="services.servicecategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Service",
                "verbose_name_plural": "Services",
                "db_table": "services",
                "ordering": ["category__name", "name"],
            },
        ),
        migrations.AddIndex(
            model_name="servicecategory",
            index=models.Index(fields=["name"], name="service_cat_name_idx"),
        ),
        migrations.AddIndex(
            model_name="servicecategory",
            index=models.Index(fields=["parent"], name="service_cat_parent_idx"),
        ),
        migrations.AddConstraint(
            model_name="servicecategory",
            constraint=models.UniqueConstraint(
                fields=("name", "parent"), name="unique_category_name_per_parent"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(fields=["name"], name="service_name_idx"),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(fields=["category"], name="service_category_idx"),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(fields=["is_active"], name="service_active_idx"),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(fields=["base_price"], name="service_price_idx"),
        ),
        migrations.AddConstraint(
            model_name="service",
            constraint=models.UniqueConstraint(
                fields=("name", "category"), name="unique_service_name_per_category"
            ),
        ),
    ]
