# Generated by Django 5.2 on 2025-08-29 16:18

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Specialization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the record is soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Specialization name (e.g., 'Manicure', 'Pedicure', 'Facial')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "specialization_type",
                    models.CharField(
                        choices=[
                            ("nail_care", "Nail Care"),
                            ("skin_care", "Skin Care"),
                            ("foot_care", "Foot Care"),
                            ("beauty_treatment", "Beauty Treatment"),
                        ],
                        default="nail_care",
                        help_text="Type of specialization",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the specialization",
                    ),
                ),
                (
                    "certification_required",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this specialization requires certification",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this specialization is currently offered",
                    ),
                ),
            ],
            options={
                "verbose_name": "Specialization",
                "verbose_name_plural": "Specializations",
                "db_table": "staff_specializations",
                "ordering": ["specialization_type", "name"],
                "abstract": False,
                "indexes": [
                    models.Index(fields=["name"], name="staff_speci_name_6e4224_idx"),
                    models.Index(
                        fields=["specialization_type"],
                        name="staff_speci_special_e2da9d_idx",
                    ),
                    models.Index(
                        fields=["is_active"], name="staff_speci_is_acti_1ed533_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StaffProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the record is soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted",
                        null=True,
                    ),
                ),
                (
                    "certification_level",
                    models.CharField(
                        choices=[
                            ("trainee", "Trainee"),
                            ("junior", "Junior"),
                            ("senior", "Senior"),
                            ("master", "Master"),
                            ("expert", "Expert"),
                        ],
                        default="junior",
                        help_text="Overall certification level of the staff member",
                        max_length=20,
                    ),
                ),
                (
                    "years_of_experience",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Years of professional experience",
                        validators=[django.core.validators.MaxValueValidator(50)],
                    ),
                ),
                (
                    "hourly_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Hourly rate for services (optional)",
                        max_digits=6,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "max_clients_per_day",
                    models.PositiveIntegerField(
                        default=8,
                        help_text="Maximum number of clients per day",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "languages_spoken",
                    models.TextField(
                        blank=True,
                        help_text="Comma-separated list of languages spoken (e.g., 'English, Spanish, Polish')",
                    ),
                ),
                (
                    "availability_notes",
                    models.TextField(
                        blank=True,
                        help_text="Special notes about staff availability or working preferences",
                    ),
                ),
                (
                    "is_accepting_new_clients",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this staff member is accepting new clients",
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(
                        blank=True,
                        help_text="Emergency contact person name",
                        max_length=100,
                    ),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(
                        blank=True,
                        help_text="Emergency contact phone number",
                        max_length=20,
                    ),
                ),
                (
                    "specializations",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Staff member's specializations",
                        related_name="staff_profiles",
                        to="staff.specialization",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="Reference to the salon user",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="staff_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Staff Profile",
                "verbose_name_plural": "Staff Profiles",
                "db_table": "staff_profiles",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="WorkingHours",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the record is soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted",
                        null=True,
                    ),
                ),
                (
                    "day_of_week",
                    models.IntegerField(
                        choices=[
                            (1, "Monday"),
                            (2, "Tuesday"),
                            (3, "Wednesday"),
                            (4, "Thursday"),
                            (5, "Friday"),
                            (6, "Saturday"),
                            (7, "Sunday"),
                        ],
                        help_text="Day of the week (1=Monday, 7=Sunday)",
                    ),
                ),
                ("start_time", models.TimeField(help_text="Start time for this day")),
                ("end_time", models.TimeField(help_text="End time for this day")),
                (
                    "is_available",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the staff member is available on this day",
                    ),
                ),
                (
                    "break_start_time",
                    models.TimeField(
                        blank=True, help_text="Break start time (optional)", null=True
                    ),
                ),
                (
                    "break_end_time",
                    models.TimeField(
                        blank=True, help_text="Break end time (optional)", null=True
                    ),
                ),
                (
                    "staff_profile",
                    models.ForeignKey(
                        help_text="Staff profile these working hours belong to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="working_hours",
                        to="staff.staffprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Working Hours",
                "verbose_name_plural": "Working Hours",
                "db_table": "staff_working_hours",
                "ordering": ["staff_profile", "day_of_week"],
                "abstract": False,
            },
        ),
        migrations.AddIndex(
            model_name="staffprofile",
            index=models.Index(
                fields=["certification_level"], name="staff_profi_certifi_93f130_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="staffprofile",
            index=models.Index(
                fields=["years_of_experience"], name="staff_profi_years_o_961697_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="staffprofile",
            index=models.Index(
                fields=["is_accepting_new_clients"],
                name="staff_profi_is_acce_884b58_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="workinghours",
            index=models.Index(
                fields=["staff_profile", "day_of_week"],
                name="staff_worki_staff_p_a69156_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="workinghours",
            index=models.Index(
                fields=["day_of_week"], name="staff_worki_day_of__08b54e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="workinghours",
            index=models.Index(
                fields=["is_available"], name="staff_worki_is_avai_01f519_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="workinghours",
            constraint=models.UniqueConstraint(
                fields=("staff_profile", "day_of_week"),
                name="unique_staff_day_working_hours",
            ),
        ),
    ]
