# Generated by Django 5.2 on 2025-08-28 17:44

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the record is soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted",
                        null=True,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Primary contact phone number",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "emergency_contact_name",
                    models.CharField(
                        blank=True,
                        help_text="Emergency contact person name",
                        max_length=100,
                    ),
                ),
                (
                    "emergency_contact_phone",
                    models.CharField(
                        blank=True,
                        help_text="Emergency contact phone number",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be in format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "service_preferences",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Client service preferences, favorite staff, and booking patterns",
                    ),
                ),
                (
                    "allergies",
                    models.TextField(
                        blank=True,
                        help_text="Known allergies and sensitivities for service safety",
                    ),
                ),
                (
                    "skin_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("normal", "Normal"),
                            ("dry", "Dry"),
                            ("oily", "Oily"),
                            ("combination", "Combination"),
                            ("sensitive", "Sensitive"),
                            ("mature", "Mature"),
                            ("acne_prone", "Acne-Prone"),
                        ],
                        help_text="Skin type for facial and skincare services",
                        max_length=50,
                    ),
                ),
                (
                    "hair_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("straight", "Straight"),
                            ("wavy", "Wavy"),
                            ("curly", "Curly"),
                            ("coily", "Coily"),
                            ("fine", "Fine"),
                            ("thick", "Thick"),
                            ("damaged", "Damaged"),
                            ("color_treated", "Color-Treated"),
                        ],
                        help_text="Hair type and condition for hair services",
                        max_length=50,
                    ),
                ),
                (
                    "total_visits",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of completed appointments"
                    ),
                ),
                (
                    "total_spent",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Total amount spent on services",
                        max_digits=10,
                    ),
                ),
                (
                    "last_visit",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time of last completed appointment",
                        null=True,
                    ),
                ),
                (
                    "loyalty_points",
                    models.PositiveIntegerField(
                        default=0, help_text="Accumulated loyalty points for rewards"
                    ),
                ),
                (
                    "preferred_contact_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("phone", "Phone Call"),
                            ("app", "App Notification"),
                        ],
                        default="email",
                        help_text="Preferred method for appointment reminders and communications",
                        max_length=20,
                    ),
                ),
                (
                    "marketing_consent",
                    models.BooleanField(
                        default=False,
                        help_text="Consent to receive marketing communications",
                    ),
                ),
                (
                    "reminder_consent",
                    models.BooleanField(
                        default=True,
                        help_text="Consent to receive appointment reminders",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes about the client for staff reference",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="Associated user account for the client",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Client",
                "verbose_name_plural": "Clients",
                "db_table": "clients",
                "indexes": [
                    models.Index(
                        fields=["phone_number"], name="clients_phone_n_1a9953_idx"
                    ),
                    models.Index(
                        fields=["last_visit"], name="clients_last_vi_dd4895_idx"
                    ),
                    models.Index(
                        fields=["total_visits"], name="clients_total_v_e170c2_idx"
                    ),
                    models.Index(
                        fields=["total_spent"], name="clients_total_s_5c2a96_idx"
                    ),
                ],
            },
        ),
    ]
